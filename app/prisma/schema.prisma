// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  firstName          String
  lastName           String
  phone              String?
  password           String
  role               String    @default("USER")
  isActive           Boolean   @default(true)
  emailVerified      Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastLoginAt        DateTime?
  stripeCustomerId   String?   @unique
  subscriptionStatus String?
  subscriptionId     String?   @unique
  currentPeriodEnd   DateTime?
  planType           String?

  // Relations
  venues        Venue[]
  bookings      Booking[]
  notifications Notification[]
  sessions      UserSession[]

  @@map("users")
}

model UserSession {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("user_sessions")
}

model Venue {
  id              String   @id @default(cuid())
  name            String
  description     String?
  address         String
  city            String
  state           String
  zipCode         String
  postcode        String?
  country         String   @default("US")
  phone           String?
  email           String?
  website         String?
  capacity        Int?
  pricePerHour    Float?
  currency        String   @default("USD")
  featured        Boolean  @default(false)
  cuisine         String?
  venueType       String?
  amenities       Json?
  isActive        Boolean  @default(true)
  openingHours    Json?
  latitude        Float?
  longitude       Float?
  slug            String?  @unique
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String
  bookings Booking[]
  tables   Table[]
  widgets  Widget[]

  @@map("venues")
}

model Table {
  id       String @id @default(cuid())
  name     String
  capacity Int
  isActive Boolean @default(true)

  // Relations
  venue     Venue     @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId   String
  bookings  Booking[]

  @@map("tables")
}



model Booking {
  id          String        @id @default(cuid())
  date        DateTime
  time        String        // Format: "HH:MM"
  partySize   Int
  status      BookingStatus @default(PENDING)
  notes       String?
  totalAmount Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  venue      Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId    String
  table      Table? @relation(fields: [tableId], references: [id])
  tableId    String?

  @@map("bookings")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("notifications")
}

model Widget {
  id        String   @id @default(cuid())
  name      String
  settings  Json     // Widget configuration
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId String

  @@map("widgets")
}

// Enums
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}