// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venues       Venue[]
  bookings     Booking[]
  notifications Notification[]
  subscription Subscription?

  @@map("users")
}

model Venue {
  id          String   @id @default(cuid())
  name        String
  description String?
  location    String
  address     String?
  phone       String?
  email       String?
  website     String?
  priceRange  String?
  capacity    Int?
  cuisine     String[]    // Reverted from Json to String[] for PostgreSQL
  amenities   String[]    // Reverted from Json to String[] for PostgreSQL
  images      String[]    // Reverted from Json to String[] for PostgreSQL
  headerImage String?
  logo        String?
  rating      Float?   @default(0)
  reviewCount Int?     @default(0)
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      String
  bookings     Booking[]
  tables       Table[]
  openingHours OpeningHours[]
  widgets      Widget[]

  @@map("venues")
}

model Table {
  id       String @id @default(cuid())
  name     String
  capacity Int
  isActive Boolean @default(true)

  // Relations
  venue     Venue     @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId   String
  bookings  Booking[]

  @@map("tables")
}

model OpeningHours {
  id        String @id @default(cuid())
  dayOfWeek Int    // 0 = Sunday, 1 = Monday, etc.
  openTime  String // Format: "HH:MM"
  closeTime String // Format: "HH:MM"
  isClosed  Boolean @default(false)

  // Relations
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId String

  @@map("opening_hours")
}

model Booking {
  id          String        @id @default(cuid())
  date        DateTime
  time        String        // Format: "HH:MM"
  partySize   Int
  status      BookingStatus @default(PENDING)
  notes       String?
  totalAmount Float?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  venue      Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId    String
  table      Table? @relation(fields: [tableId], references: [id])
  tableId    String?

  @@map("bookings")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@map("notifications")
}

model Widget {
  id        String   @id @default(cuid())
  name      String
  settings  Json     // Widget configuration
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId String

  @@map("widgets")
}

model Subscription {
  id                String             @id @default(cuid())
  stripeCustomerId  String?            @unique
  stripeSubscriptionId String?         @unique
  stripePriceId     String?
  status            SubscriptionStatus @default(INACTIVE)
  currentPeriodEnd  DateTime?
  cancelAtPeriodEnd Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@map("subscriptions")
}

// Enums
enum Role {
  ADMIN
  VENUE_OWNER
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}
